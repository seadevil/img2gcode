package require Tk

# Get the current scripts directory

# Source in the supporting file with the current scripts 
# directory as its base

#source [file join $starkit::topdir funcs.tcl]

#The example code

#button .hello -text "Say Hello" -command { sayHello "World" }
#pack .hello -padx 5 -pady 5 -expand 1 -fill both

## Menu
grid [frame .m -relief raised -bd 2] -sticky ew
## File Menu
menubutton .m.f -menu .m.f.m -text "File"
menu .m.f.m
.m.f.m insert end command -label "Exit" -command exit
.m.f.m insert 0 command -label "Load Img..." -command loadImg...

## View Menu
menubutton .m.v -menu .m.v.m -text "View"
menu .m.v.m
.m.v.m insert 0 command -label "Fit" -command {
  set w [image width srcimg]
  set h [image height srcimg]
  puts stderr [format "with='%s' height='%s'" $w $h]
  .i.src config -width $w -height $h
  .i.dst config -width $w -height $h
}

grid .m.f .m.v

## photo panel
grid [frame .i] -sticky nsew
image create photo srcimg ;#
label .i.src -image srcimg -width 100 -height 100 -padx 2 -pady 2 -relief groove
canvas .i.dst -relief groove -bd 2
grid .i.src .i.dst -sticky nsew

## LoadImg
proc loadImg... {} {
  set fName [tk_getOpenFile]
  if {$fName ne ""} {
    .i.src config -image {}
    srcimg blank
    srcimg read $fName
    .i.src config -image srcimg
    set ::v(pw) [image width srcimg]
    set ::v(ph) [image height srcimg]
  }
}

proc labelEntry {path name text value} {
  label $path.${name}l -text $text
  entry $path.${name}e -textvariable v($name)
  set ::v($name) $value
  return [list $path.${name}l $path.${name}e]
}
proc shift {vname} {
  upvar $vname x
  #set ans [lindex $x 0]
  set x [lassign $x ans]
  return $ans
}
proc labelThing {args} {
  set path ".t"
  set name "name"
  set scr {}
  set wl {}
  while {[llength $args] > 0} {
    set cmd [shift args]
    switch -- $cmd {
      -path {set path [shift args]}
      -name {set name [shift args]}
      -text  {lappend scr [subst -novariables {label $path.${name}l -text "[shift args]"; lappend wl $path.${name}l}]}
      -entry {lappend scr [subst -novariables {entry $path.${name}e -textvariable ::v($name); lappend wl $path.${name}e}]}
      -label {lappend scr [subst -novariables {label $path.${name}v -textvariable ::v($name); lappend wl $path.${name}v}]}
      -value {lappend scr [subst -novariables {set ::v($name) [shift args]}]}
      -cmd   {lappend scr [subst -novariables {button $path.${name}c -text "[shift args]" -command [shift args]; lappend wl $path.${name}c}]}
      default {error "labelThing bad cmd=$cmd"}
    }
    #puts stderr [format "labelThing: cmd='%s' scr='%s'" $cmd $scr]
  }
  #puts stderr [join $scr "\n  "]
  eval [join $scr "\n"]
  return $wl
}

## toolboc
grid [frame .t -relief sunken -bd 2] -sticky ew
button .t.gs -text "Convert to greyscale" -command {srcimg configure -palette 256}
grid .t.gs
grid {*}[labelEntry .t pps "pixels per scanline" 7]
grid {*}[labelEntry .t ss  "laser spot size (in mm)" 7]
grid {*}[labelThing -path .t -name pw -text "img pixel width" -label -value ?]
grid {*}[labelThing -path .t -name ph -text "img pixel height" -label -value ?]
grid {*}[labelThing -path .t -name ppmm -text "pixels/mm" -entry -value 1 -cmd "recompute" rc]
button .t.go -text "go" -command go
grid .t.go

proc go {} {
  set W [image width srcimg]
  set H [image height srcimg]
  set w [expr {$W/$::v(pps)}]
  set h [expr {$H/$::v(pps)}]
  #set xp 0
  #set yp 0
  .i.dst delete all
  for {set y 0} {$y < $h} {incr y 1} {
    set Y0 [expr {$::v(pps)*($y)}]
    set Y1 [expr {$::v(pps)*($y+1)}]
    set Y  [expr {round($::v(pps)*($y+0.5))}]
    for {set x 0} {$x < $w} {incr x 1} {
      set X0 [expr {$::v(pps)*($x)}]
      set X1 [expr {$::v(pps)*($x+1)}]
      set X  [expr {round($::v(pps)*($x+0.5))}]
      # find average of pixels xp...x  yp...y X0...X1 Y0...Y1 (centered at X Y)
      if {1} {
        set data [srcimg data -from $X0 $Y0 $X1 $Y1 -grayscale]
	#puts stderr [format "data=%s" $data]
	catch {unset R; unset G; unset B}
	foreach row $data {
	  foreach column $row {
             scan $column "#%2x%2x%2x" r g b
             lappend R $r
             lappend G $g
             lappend B $b
	  }
        }
#puts stderr $R
	set R [expr "([join $R "+"])/[llength $R]"]
	set G [expr "([join $G "+"])/[llength $G]"]
	set B [expr "([join $B "+"])/[llength $B]"]
      } else {
        lassign [srcimg get $X $Y] R G B
      }
      set lvl [expr {round(sqrt($R*$R+$G*$G+$B*$B))}]
      if {[info exists xp] && [info exists yp]} {
	#.i.dst create line  $xp $yp $X $Y -width $::v(pps) -fill [format "#%02x%02x%02x" $lvl $lvl $lvl]
	#.i.dst create line  $xp $yp $X $Y -width $::v(pps) -fill [format "#%02x%02x%02x" $R $G $B]
	#.i.dst create line  $xp $Y $X $Y -width 1  -fill [format "#%02x%02x%02x" $R $G $B]
	#.i.dst create line  $xp $Y $X $Y -width $::v(ss)  -fill [format "#%02x%02x%02x" $R $G $B]
	.i.dst create line  $xp $Y0 $X $Y0 -width $::v(ss)  -fill [format "#%02x%02x%02x" $R $G $B]
	update idletasks
      }
      set xp $X
    }
    unset xp
    set yp $Y
  }
}
